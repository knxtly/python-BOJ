import sys
input = sys.stdin.readline
import heapq as hq

n, eCnt, target = map(int, input().split())
graph = {v: [] for v in range(1, n+1)}
INF = float("inf")
for i in range(eCnt):
    s, e, w = map(int, input().split())
    graph[s].append((e, w))

def dijkstra(startV):
    distance = {v: INF for v in graph}
    pq = []
    distance[startV] = 0
    hq.heappush(pq, (0, startV))
    while pq:
        nowDist, nowV = hq.heappop(pq)
        for newV, weight in graph[nowV]:
            newDist = nowDist + weight
            if distance[newV] > newDist:
                distance[newV] = newDist
                hq.heappush(pq, (newDist, newV))
    return distance

ans = {v: 0 for v in graph}
for i in range(1, n+1):
    res = dijkstra(i)
    ans[i] = res[target]

res = dijkstra(target)
for i in res:
    ans[i] += res[i]
# print(ans)
print(max(ans.values()))
